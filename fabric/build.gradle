plugins {
	id "com.github.johnrengelman.shadow" version "${shadow_version}"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	Project common = project(":common")
	accessWidenerPath = common.loom.accessWidenerPath

	runs {
		datagen {
			client()

			name "Minecraft Data"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=calamity"
			vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

			environmentVariable("DATAGEN", "TRUE")
		}
	}
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

configurations.configureEach {
	resolutionStrategy.eachDependency {
		if (requested.module.name == "fabric-loader") {
			useVersion(fabric)
		}
	}
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url = "https://mvn.devos.one/snapshots/" }
	// Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api}+${rootProject.minecraft_version}"
	runtimeOnly 'org.joml:joml:1.10.4' // Don't know why fabric api needs this

	modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu}"

	modImplementation("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${rootProject.create_fabric}+mc${rootProject.minecraft_version}")

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon, project.configurations.shade]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set null
}

jar {
	archiveClassifier.set "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}