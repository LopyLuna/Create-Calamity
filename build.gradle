plugins {
    id "architectury-plugin" version "${arch_plugin_version}"
    id "dev.architectury.loom" version "${loom_version}" apply false
	id "io.github.juuxel.loom-vineflower" version "${vineflower_version}" apply false
	id "io.github.p03w.machete" version "${machete_version}"
}

defineMixins()

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects { p ->
    apply plugin: "dev.architectury.loom"
	apply plugin: "io.github.juuxel.loom-vineflower"

	def froge = p == project(":forge")
	def fabric = p == project(":fabric")
	def common = p == project(":common")

	loom {
		silentMojangMappingsLicense()
		runs.configureEach {
			vmArg("-Dmixin.debug.export=true")
			vmArg("-Dmixin.env.remapRefMap=true")
			vmArg("-Dmixin.env.refMapRemappingFile=${projectDir}/build/createSrgToMcp/output.srg")
		}
	}

    configurations {
		addJar
		shade

        addJarCompile
		addJarRuntime

		if (!common) {
			include.extendsFrom addJar
		}

        compileOnly.extendsFrom addJarCompile
		annotationProcessor.extendsFrom addJarCompile
        implementation.extendsFrom addJarRuntime

		addJar.extendsFrom addJarCompile
		addJar.extendsFrom addJarRuntime

		implementation.extendsFrom shade
    }

	repositories {
		mavenCentral()
		maven { url = "https://maven.parchmentmc.org" }
		maven { url = "https://maven.quiltmc.org/repository/release" }
		maven {
			url = "https://maven.tterrag.com/"
			content { includeGroup("com.jozufozu.flywheel") }
		}
	}

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings(loom.layered {
			it.mappings("org.quiltmc:quilt-mappings:${rootProject.minecraft_version}+build.${rootProject.quilt}:intermediary-v2")
			it.parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment}@zip")
			it.officialMojangMappings { nameSyntheticMembers = false }
		})


        // Dev Env Optimizations
        //// https://www.cursemaven.com/
        //// https://docs.modrinth.com/docs/tutorials/maven/

        if (fabric) {
            if (rootProject.hasProperty("lazydfu")) {
				modRuntimeOnly "maven.modrinth:lazydfu:${rootProject.lazydfu}"
            }
            if (rootProject.hasProperty("smoothboot_fabric")) {
				modRuntimeOnly "curse.maven:smoothboot-fabric-415758:${rootProject.smoothboot_fabric}"
            }
        }

        if (froge) {
            if (rootProject.hasProperty("bmb")) {
				modRuntimeOnly "curse.maven:better-mods-button-541584:${rootProject.bmb}"
            }
            if (rootProject.hasProperty("smoothboot_forge")) {
				modRuntimeOnly "curse.maven:smoothboot-forge-633412:${rootProject.smoothboot_forge}"
            }
            if (rootProject.hasProperty("catalogue")) {
				modRuntimeOnly "curse.maven:catalogue-459701:${rootProject.catalogue}"
			}
			if (rootProject.hasProperty("ferritecore")) {
				modRuntimeOnly "curse.maven:ferritecore-429235:${rootProject.ferritecore}"
			}
        }
    }

    processResources {
        def properties = [
			version: rootProject.mod_version,
			minecraft_version: rootProject.minecraft_version,
			forge: rootProject.forge.split("\\.")[0],
			fabric: rootProject.fabric,
			fabric_api: rootProject.fabric_api,
			create_forge: rootProject.create_forge.split("-")[0],
			create_fabric: rootProject.create_fabric,
        ]

        inputs.properties properties

        filesMatching("fabric.mod.json") {
            expand properties
        }

        filesMatching("META-INF/mods.toml") {
            expand properties
        }
    }

}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven { url 'https://jitpack.io' } // idk a lot of stuff
        maven { // modrinth
            url "https://api.modrinth.com/maven"
            content { includeGroup "maven.modrinth" }
        }
        maven { // curseforge
            url "https://www.cursemaven.com"
            content { includeGroup "curse.maven" }
        }
    }

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"
		options.release = 17
	}

	java {
        withSourcesJar()
    }

	machete {
		// disable machete locally for faster builds
		enabled = System.getenv("GITHUB_RUN_NUMBER") != null
	}
}

static def getBuildNumber() {
	String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
	return (buildNumber != null ? ".${buildNumber}" : "")
}


// Defines the mixins
def defineMixins() {
    def mixins = new ArrayList<String>()
    def projects = new ArrayList<String>()

    for (Project proj : rootProject.subprojects) {
        projects.add(proj.name)
    }

    for (String proj : projects) {
        for (File file : project(proj).file("src/main/resources/").listFiles()) {
            if (file.getName().endsWith("mixin.json") || file.getName().endsWith("mixins.json")) {
                mixins.add(file.getName())
            }
        }
    }

    rootProject.ext.set("mixins", mixins)
}
